Buisiness embed/port/convert condition : 
	Tie up with Yoko Ono Office and Ruby Association
	( Without port/convert VM : Mr. Miura Hideki too )
Approve : 
	Professor Fei-Fei Li ( Pre co-own rights for AL use ( not AI ) )
	Mr. Miura Hideki ( Rights of add licence of this OSS )



For mruby d17506c1	# patch
For monami-ya.mrb	# no patch
http://mrb.monami-ya.jp/
http://github.com/ysei/monami-ya.mrb/tree/mruby-meta-circular-heiretu/



Base code : Miura Hideki
Thread : mattn
mruby : matz , monaka


Please donate to them , Ruby/Rubinius/Maglev committers , and Rubyists
Code : Free 
Coding : Not free
http://www.gnu.org/philosophy/selling.html
http://www.gnu.org/philosophy/selling.en.html



Note


10410200

Ext file : ./~~ritepl.loc
Ext ENV  :   ~~ritepl ...



Patch


10410200

src/vm.c
http://github.com/ysei/mruby/commit/053a5dc623258e80da9aa7cc15a1adb9552d5212
58b1c088

# include/mrbconf.h
# MRB_GC_TURN_OFF_GENERATIONAL


80410200

mrblib/array.rb , src/array.c
http://github.com/mattn/mruby-thread/issues/15#issuecomment-51916890



build_config.rb


  # conf.gem :github => 'mattn/mruby-thread'
    conf.gem :github => 'ysei/mruby-thread', :branch => 'master_-_merge_-_postmodern_-_master_-_pthread_kill_-_8a67d500'
  # conf.gem :github => 'crimsonwoods/mruby-thread', :branch => 'experimental_thread_support'
  # conf.gem :github => 'ysei/mruby-thread', :branch => 'ac8d04fb6c'
  # conf.gem :github => 'miura1729/mruby-meta-circular'
    conf.gem :github => 'iij/mruby-env'
    conf.gem :github => 'mattn/mruby-json'
    conf.gem :github => 'iij/mruby-io'
    conf.gem :github => 'iij/mruby-process'
  # conf.gem :github => 'bamchoh/mruby-sleep', :branch => 'support-float-value'

Thank you authers



Sample log


0       ENTER   62
1       LOADSELF        6000001
2       LOADI   38900c1
1                       LOADSELF        -       -
1               getarg_a        6000001
1               getarg_a        6000001
1                       LOADSELF        2       -
1                       LOADSELF        2       2
3       SEND    0a00001
2                       LOADI   -       -
2               getarg_sbx      38900c1
2               getarg_a        38900c1
2                       LOADI   41      3
0       ENTER   6200002
1       MOVE    1004081
2       LOADI   3000042
1                       MOVE    -       -
1               getarg_b        1004081
1               getarg_a        1004081
1                       MOVE    3       5
3       EQ      2b00081
2                       LOADI   -       -
2               getarg_sbx      3000042
2               getarg_a        3000042
2                       LOADI   1       6
4       JMPNOT  91100c1
3               getarg_a        2b00081
3                       EQ      -       -
3                       EQ      5       5
7       MOVE    1004081
8       LOADI   38fff32
7                       MOVE    -       -
7               getarg_b        1004081
7               getarg_a        1004081
7                       MOVE    3       -
7                       MOVE    3       5
9       EQ      2b00081
8                       LOADI   -       -
8               getarg_sbx      38fff32
8               getarg_a        38fff32
8                       LOADI   0       6
a       JMPNOT  91100c1
9                       EQ      -       -
9               getarg_a        2b00081
9                       EQ      5       5
d       LOADSELF        6000081
e       MOVE    1004002
d               getarg_a        6000081
d               getarg_a        6000081
d                       LOADSELF        5       5
f       SUBI    fa08002
e                       MOVE    -       -
e                       MOVE    -       -
e               getarg_b        1004002
e                       MOVE    3       -
e               getarg_a        1004002
e                       MOVE    3       6
f               getarg_c        fa08002
f               getarg_a        fa08002
01      SEND    0a04081
f                       SUBI    1       -
f                       SUBI    1       6
0       ENTER   6200002
1       MOVE    1004081
2       LOADI   3000042
1               getarg_b        1004081
1               getarg_a        1004081
1                       MOVE    6       8
3       EQ      2b00081



Teikyou


ABEkeniti , ABEkouta , AEC , AHS-AC , akihito heika , ANDOUjun , 
AnjouNourin , AsahidouCamera , ASC , AUE , ArkInternet , BABAkenji , 
BinaryCoders , CarrotParty , ChipDesigners , DDS , Douglas E Smith , Ecom , 
EidenSya , EntuuJi , FHUH , FpFt , FUJIMOTOisao , FukagawaJidousya , 
FUKATANIsyouiti , GalleryIDF , GwAmyuuzu , HARADAsouzaburou , HASEGAWAatusi , 
HAYAKAWAtakasi , HIEIyukio , hidenori, HiramatuMokuzai , HIRANOtakahiko , 
HoshigaokaBowl , HSB-AYU , IcLandMatuno , I.C.Mach , IKEMITUsatoo , 
INAGAKIhitosi , IsidaGarasu , Isidake , ITAKURAyuuji , ItouTosou , 
IWATAtakaaki , IWATUKIhiroyuki , IWE , Jay Miner , Jean L Gassee , KADO , 
KAGEYAMAken , KamiyaTategu , KANAMORI , KATOUario , KATOUm , KatouPiano , 
KATOUyosiharu , KAMIUTIseikou , KanekoKougyou , KAZAOKA , Kazoku , kenji , 
KITAMURAtuyosi , KITANOmasaya , KIYOTAkazuo , KOIKEkinya , KONDOU , 
KONDOUreisi , KondouZouen , KuwayamaDenkaShop , KyanonSaizensen , Lpn , 
MAKINOmasami , MankaiSeisakujo , masataka , MATUFUJI , MATUMOTOmasakazu , 
MATUMOTOreiji , Matz , MiComTech , MIKI , MISIMA , MitomoSangyou , 
MITUYAyuuji , MIURAkenji , MiyosiRichLand , MizutaniEijiJimusyo , MONDEN , 
NAKANEkou , NAITOUmutumi , NAGATA , NagoyaJuke , NAKAGAWAmasaya , NAKAO , 
NamcoN , NARITA , NayabasiOosu , NeuroClub , NHlignuxNH , NISII , 
NISIKADOtomohiro , NISIMURAtakesi , NOJIMAakinori , NOKURA , 
NonoyamaKoumuTen , NUSis , OAsystem-plaza , Oh!MZ , Oh!X , OKADA , OkaSin , 
OKAYAMAyasuo , OKUMURAnobuo , OOGAWARAkunio , OOI , OONISI , OONISIyosinori , 
Otoya , OZAWAhiroki , PanNoKi , Plainss , Professor Alan Kay , 
Professor Andrew S Tanenbaum , Professor Babbage , Professor Buddha , Rms , 
Rockin' , Ryou , RtSangyouKai , Saarunaato , SAITOUken , SAKAMURAken , Saki , 
SankyouDouro , SATAKE , SATOUfumi , SAWATARIkatuya , SegaN , SeianJi , SFI , 
Sharp , SIBATAkaku , Sinonomesora , SiojiDenki , SONA , Spd Yum^2 , Sphr , 
StarbaseNagoya , StudioSpeak , SUGIURA , SUMITUJI , SusiKen , SUZUKI , 
SUZUKItosikazu , Syoji , SyouwaJidousya , Taataa , TAGUTIkagekiyo , TAKAMI , 
Takasago , TAKATUKASA , TANAKAyasusi , TANAKAhideaki , TANIGUTItakanori , 
TirasiYa , TomoeYa , TomotikaSyoukai , Tooya , TORII , TOSIMITUakihito , 
TougouTyou , ToyoSin , ToyookaDenki , TOYOTAsumio , Tsukumo , 
TurumaiMztnSyasin , TuruYa , Tutui , TyuukyouMiCom , TyuunitiKatouRiyou , 
UKAI , Usagi , UsagiDan , UsidaSyouten , WAKAZONO , WATANABE , Wellenetz , 
WestDartsClub , Xseld , YAMADA , YAMADAkenji , YamadaMura , YAMADA , 
YAMADAs , YAMAJI , YAMAMOTOryuuji , YAMAZAKIeiji , YokoiFSika , yosinori , 
Yottyan



Todo


ENVary Bunkatu
MeireiStream KurasuKa
Ritorai
RT rokku
YuukiKa



Memo


http://github.com/lsegal/barracuda/

program = Barracuda::Program.new <<EOF
__kernel void get_opcode(
  __global int *a	// ,
// __global int *b
) {
  int i = get_global_id(0);
  a[i] = a[i] & 0x7f
}
EOF

n = 1_000_000
a = Array.new(n) {cop}
sym = program.get_opcode(a, :times => n)

	http://r7kamura.hatenablog.com/entry/2011/12/28/234717


http://github.com/davll/ruby-opencl/

kernel_source = <<EOF
__kernel void
get_opcode (__global const int *a,
             __global int *c)
{
  int gid = get_global_id(0);
  c[gid] = a[gid] & 0xff;
}
EOF

OpenCL::Quick.init
n = 256
sym = OpenCL::Quick::VArray.new(OpenCL::VArray::INT, n)

for i in 0...n
  cop[i] = OpenCL::INT.new(i)
end

OpenCL::Quick.sources = [kernel_source]
OpenCL::Quick.execute_NDRange("get_opcode", [cop], [n], [1])



http://prg.is.titech.ac.jp/ja/projects/ikra/
http://prg.is.titech.ac.jp/members/masuhara/papers/jssst2011-nishiguchi.pdf

sym = MDarray.new(2) {"get_opcode", cop}

case sym.shift
when "get_opcode"
  sym = sym.map { |cop|
    cop & 0xff
  }
end



http://github.com/matsumoto-r/mruby-on-Lua/
http://github.com/RyanScottLewis/lua-mruby/
http://github.com/CowboyTim/lua-cell/
http://google.com/search?q=ruby+cellbe



 ( eof ) 

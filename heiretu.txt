Base code : Miura Hideki



Patch


src/vm.c
http://github.com/ysei/mruby/commit/053a5dc623258e80da9aa7cc15a1adb9552d5212
58b1c088

# include/mrbconf.h
# MRB_GC_TURN_OFF_GENERATIONAL



build_config.rb


    conf.gem :github => 'mattn/mruby-thread'
  # conf.gem :github => 'ysei/mruby-thread', :branch => 'master_-_merge_-_postmodern_-_master_-_pthread_kill_-_8a67d500'
  # conf.gem :github => 'crimsonwoods/mruby-thread', :branch => 'experimental_thread_support'
  # conf.gem :github => 'ysei/mruby-thread', :branch => 'ac8d04fb6c'
    conf.gem :github => 'miura1729/mruby-meta-circular'
    conf.gem :github => 'iij/mruby-env'
    conf.gem :github => 'mattn/mruby-json'
    conf.gem :github => 'iij/mruby-process'

Thank you authers



Special thanks


AEC , AHS-AC , ASC , AiKyouDai , Andrew S. Tanenbaum , 
Douglas E. Smith , FUJIMOTOisao , GalleryIDF , HASEGAWA , HASEGAWAatusi , 
HAYAKAWAtakasi , HoshigaokaBowl , HIEIyukio , INAGAKIhitosi , 
Jean L. Gassee , KADO , KAGEYAMAken , KATOUario , KatouPiano , KAMIUTI , 
KATAYAMA , KITAGAWAhirosi , KITAMURAtuyosi , KITANOmasaya , KOIKEkinya , 
KuwayamaDenkaShop , MAKINOmasami , MATUMOTOmasakazu , masataka , MIKI , 
MIURAkenji , MizutaniEijiJimusyo , NAITOUmutumi , NagoyaJuke , 
NAKAGAWAmasaya , NARITA , NHlignuxNH , NISII , NISIKADOtomohiro , 
NISIMURAtakesi , NOJIMAakinori , OAsystem-plaza , Oh!MZ , Oh!X , 
OKAYAMAyasuo , OKUMURAnobuo , OOI , OONISIyosinori , Plainss , 
SAITOUken , SATAKE , SATOUfumi , Syoji , TAKAMI , Takasago , TAKATUKASA , 
TANAKAyasusi , TANAKAhideaki , TANIGUTItakanori , Tooya , TORII , 
Tsukumo , Tutui , Usagi , WATANABE , YAMAJI , YAMAZAKIeiji , yosinori






Memo


http://github.com/lsegal/barracuda/

program = Barracuda::Program.new <<EOF
__kernel void get_opcode(
  __global int *a	// ,
// __global int *b
) {
  int i = get_global_id(0);
  a[i] = a[i] & 0x7f
}
EOF

n = 1_000_000
a = Array.new(n) {cop}
sym = program.get_opcode(a, :times => n)

	http://r7kamura.hatenablog.com/entry/2011/12/28/234717


http://github.com/davll/ruby-opencl/

kernel_source = <<EOF
__kernel void
get_opcode (__global const int *a,
             __global int *c)
{
  int gid = get_global_id(0);
  c[gid] = a[gid] & 0xff;
}
EOF

OpenCL::Quick.init
n = 256
sym = OpenCL::Quick::VArray.new(OpenCL::VArray::INT, n)

for i in 0...n
  cop[i] = OpenCL::INT.new(i)
end

OpenCL::Quick.sources = [kernel_source]
OpenCL::Quick.execute_NDRange("get_opcode", [cop], [n], [1])



http://prg.is.titech.ac.jp/ja/projects/ikra/
http://prg.is.titech.ac.jp/members/masuhara/papers/jssst2011-nishiguchi.pdf

sym = MDarray.new(2) {"get_opcode", cop}

case sym.shift
when "get_opcode"
  sym = sym.map { |cop|
    cop & 0xff
  }
end



http://github.com/matsumoto-r/mruby-on-Lua/
http://github.com/CowboyTim/lua-cell/
http://google.com/search?q=ruby+cellbe



 ( eof ) 
















































conf.bins = %w(mrbc mruby )

  # conf.gem :github => 'ysei/mruby-thread', :branch => 'crimsonwoods_-_experimental_thread_support_-_normal'
    conf.gem :github => 'ysei/mruby-thread', :branch => 'master_-_merge_-_postmodern_-_master_-_pthread_kill_-_8a67d500'
  # conf.gem :github => 'crimsonwoods/mruby-thread', :branch => 'experimental_thread_support'
  # conf.gem :github => 'mattn/mruby-thread', :branch => 'master'
  # conf.gem :github => 'postmodern/mruby-thread', :branch => 'master'
  # conf.gem :github => 'matsumoto-r/mruby-thread', :branch => 'master'
  # conf.gem :github => 'hatoishi/mruby-thread', :branch => 'master'
  # conf.gem :github => 'miura1729/mruby-meta-circular', :branch => 'master'
    conf.gem :github => 'ysei/mruby-meta-circular-heiretu', :branch => 'heiretu'
  # conf.gem :github => 'charlescui/mruby-cache', :branch => 'master'
  # conf.gem :github => 'matsumoto-r/mruby-userdata', :branch => 'master'
    conf.gem :github => 'iij/mruby-env', :branch => 'master'
    conf.gem :github => 'mattn/mruby-json', :branch => 'master'
  # conf.gem :github => 'suzukaze/mruby-msgpack', :branch => 'master'
  # conf.gem :github => 'take-cheeze/mruby-msgpack', :branch => 'master'
  # conf.gem :github => 'schmurfy/mruby-msgpack', :branch => 'master'
  # conf.gem :github => 'matsumoto-r/mruby-redis', :branch => 'master'
  # conf.gem :github => 'matsumoto-r/mruby-vedis', :branch => 'master'
  # conf.gem :github => 'iij/mruby-io'
    conf.gem :github => 'ysei/mruby-io', :branch => 'master_-_mattn_-_global_variables'
  # conf.gem :github => 'iij/mruby-dir'
  # conf.gem :github => 'iij/mruby-tempfile'
  # conf.gem :github => 'iij/mruby-require'
    conf.gem :github => 'iij/mruby-process'
  # conf.gem :github => 'matsumoto-r/mruby-sleep', :branch => 'master'
  # conf.gem :github => 'wasabiz/mruby-partcont'
  # mruby-eval
  #memcached / Couchbase / MongoDB


  # conf.gem :github => 'take-cheeze/mruby-onig-regexp', :branch => 'global_variables'
  # conf.gem :github => 'take-cheeze/mruby-marshal', :branch => 'master'



















UTC Sun CEy002014m06d22

https://github.com/ysei/mruby
> commit 671b2c2dc7ff97b36edba07515e0ed1038c9aba0
> Merge: 85ae9ed cb25481
> Author: baron <baron@baron>
> Date:   Thu May 1 04:09:54 2014 +0000
> 
>     Merge https://github.com/mruby/mruby into mruby-thread_-_normal
> 
> commit cb2548141b743c2d5a6b03f99a45bf2707cf59f7

  conf.gem :github => 'ysei/mruby-thread', :branch => 'master_-_merge_-_postmodern_-_master_-_pthread_kill_-_8a67d500'
	( 89b2c90debde8b5ab5ca48a8d7c1fadc8fd69d9f ) 
  conf.gem :github => 'ysei/mruby-meta-circular-heiretu', :branch => 'heiretu'
	( 2887764222ee6175ae80eea28bbe3cd200f00959 ) 
  conf.gem :github => 'iij/mruby-env', :branch => 'master'
	( b1e3ae76991191aca88c60761d6995a98de531f9 ) 
  conf.gem :github => 'mattn/mruby-json', :branch => 'master'
	( 00269fccbce30347b1f4b99e2c985570e308813d ) 
  conf.gem :github => 'ysei/mruby-io', :branch => 'master_-_mattn_-_global_variables'
	( 4c91f5af244352320ff2ddefcc52e178898f902d ) 
  conf.gem :github => 'iij/mruby-process'
	( 44660203637eb1fc21455ed1daf00d66e8b1855b ) 























therad

compile err
b35893ee139f0fdd61dad4eae4aa071937f4ea66

compile err
0947aefa23701c5cb25d89e18c591c6d7afeaa37

compile err
4a2c37df935495fd612377d67bdba0582ad1813e

ok
5da7bd3a9133f03eb259fd9858cb08fa56bc53ac
201402


no
commit 65d2073739e47142125e5b666d24c551c3e652a9
Merge: 78ab979 993095c
Author: Yukihiro "Matz" Matsumoto <matz@ruby-lang.org>
Date:   Tue Jan 7 00:37:38 2014 -0800

no 7c3f06ddd8cd61277e041b538da68fd5b8be9dde
no af5bec1fbc2fd2047d40524d3bfedea77de318b2
commit af5bec1fbc2fd2047d40524d3bfedea77de318b2
Author: fleuria <me.ssword@gmail.com>
Date:   Tue Oct 1 21:32:16 2013 +0800

no
commit 862517d540c12a54c5750e83a65274bccfe9df51
Author: Keita Obo <ktaobo@gmail.com>
Date:   Fri Sep 20 17:23:00 2013 +0900






commit d74887f5822e3ec75f29fbb1de3ae6c9fe282513
Author: Yukihiro "Matz" Matsumoto <matz@ruby-lang.org>
Date:   Fri Sep 20 15:41:59 2013 +0900

compile error
commit 12183fa250ec979ae55980a038d70714c2f2fca1
Author: Yukihiro "Matz" Matsumoto <matz@ruby-lang.org>
Date:   Fri Sep 20 06:09:41 2013 +0900

ok
commit 58b1c0883baa84cc6b4394194b42cb580001b8b3
Author: Yukihiro "Matz" Matsumoto <matz@ruby-lang.org>
Date:   Fri Sep 20 06:08:01 2013 +0900





Use self for the given proc
    master
commit 862517d540c12a54c5750e83a65274bccfe9df51 1 parent d74887f
Keita Obo ktaobo authored 4 months ago
Showing 1 changed file with 2 additions and 2 deletions.
4 ?????????? src/vm.c
@@ -460,7 +460,7 @@
 {
   struct RProc *p = mrb_proc_ptr(b);
 
-  return mrb_yield_internal(mrb, b, argc, argv, mrb->c->stack[0], p->target_class);
+  return mrb_yield_internal(mrb, b, argc, argv, p->env->stack[0], p->target_class);
 }
 
 mrb_value
@@ -468,7 +468,7 @@
 {
   struct RProc *p = mrb_proc_ptr(b);
 
-  return mrb_yield_internal(mrb, b, 1, &arg, mrb->c->stack[0], p->target_class);
+  return mrb_yield_internal(mrb, b, 1, &arg, p->env->stack[0], p->target_class);
 }
 
 typedef enum {
0 notes on commit 862517d Show line notes below







vm.c 1358
+          ci = mrb->c->cibase + proc->env->cioff + 1;
+          if (!ci->stackent) {
+            localjump_error(mrb, LOCALJUMP_ERROR_BREAK);
+            goto L_RAISE;
+          }
+          mrb->c->ci = ci;















meta-circular

no
commit 592117f6c9b30a01f9cfaf5636c2b96844af79e5
Author: Miura Hideki <m-72@tf6.so-net.ne.jp>
Date:   Sat Nov 23 12:05:38 2013 +0900

    sBx　operand support

no
5a31f134df2054b311c15bca8451ec0cc713f798




ok
0412ab3b4f9ff74ae4441ea735371c4402edd760











miura
no
3e75007eb701750422ce199e9320a6d6f8bc875c

no
a080595136b3b1820b4892bb0b929eb873cbf41b




crimsonwoods
no
e8dd8180baae425c893e1054368a4c32c99ea805
no
302e20333b5da7f5f5166264c54bee7e3add6652




















# Worked not well ( Hash too ? , mruby 00201402 ? ) , 
# and Array is more suitable to GC . 


class ENVwrp < Hash
  @@usr_str_h__hed = {'rb' => 'rb__', 'nm' =>'nm__'}
  @@usr_f__nm = false
  @@usr_ep__hed = Proc.new { |a|
#p a
    k = a[0]
    if ! k.kind_of?(String)
      [false, k]
    else
      hd = ''
      hdsz = 0
      @@usr_str_h__hed.each_value { |hd|
        hdsz = hd.size
        hdsz = 0 if hd != k[0..hdsz]
        @@usr_f__nm = true if hd == @@usr_str_h__hed['nm']
      }
      [hd == k[0..hdsz - 1], k[hdsz..-1]]
    #   [hd == k.slice!(k[0..hdsz - 1]), k]
    end
  }

  # alias usr__define_extend_bind_method__hash__get []
  def [](*a)
    f, s = @@usr_ep__hed.call(a)
    # p 's=' + s
    # f ? super : a = ma('l', s)
    f ? super : ma('l', ENV[s])
#    f ? super : ma('l', ENV[ma('d', s)])
    a
  end

  # alias usr__define_extend_bind_method__hash__set []=
  def []=(*a)
#    if a.kind_of?(Hash)
#      a.each_key.each{ |k|
#	a[k]
    f, s = @@usr_ep__hed.call(a)
    #    f ? super : a = ma('d', a[1], s)
#    f ? super : ENV[s] = ma('d', a[1])
    f ? super : ENV[ma('d', s)] = ma('d', a[1])
    a
  end

  #  def ma(*arg)
  def ma(m, a)
    # m = arg.shift
    if ! @@usr_f__nm
      # 'd' == m ? ENV[arg[1]] = Marshal.dump(arg[0]) : a = Marshal.load(ENV[arg[0]])
      # 'd' == m ? a = Marshal.dump(arg[0]) : a = Marshal.load(arg[0])
p m, a
#      'd' == m ? a = Marshal.dump(a) : ( a = Marshal.load(a) if a.kind_of?(String) )
      'd' == m ? a = Marshal.dump(a) : a = Marshal.load(a)
    end
    a
  end

end


class Envhashaa
  @@str__hedenv = 'env__'
  def initialize(n = 1, *arg)
    n -= 1
    eh=''
    if n < 0 then
      [0..n].each { |l| self.get(*arg)}
    else
      (0..n).each { |l|
        set(l, *arg)
      }
    end
  end

  def set(l, *arg)
    eh = l.to_s
    eh += cv(*arg[0..-2])
    ENV[@@idb + cv(eh)] = arg[-1] #.to_s
  end

  def add(l, *arg)
    eh = l.to_s
    eh += cv(*arg[0..-2])
    ENV[@@idb + cv(eh)] += arg[-1].to_s
  end

  def push(l, *arg)
    eh = l.to_s
    eh += cv(*arg[0..-2])
    ENV[@@idb + cv(eh)].push(arg[-1].to_s)
  end

  def get(*arg)
    ENV[@@idb + cv(*arg)]
  end

  def cv(*arg)
    eh=''
    arg.each{|s| eh += @@sep + s.to_s}
    eh
  end

  def gtnm
    [@@idb, @@sep]
  end

end



##    wkth(pc2ab + 2)
